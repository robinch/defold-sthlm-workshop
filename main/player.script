function init(self)
	-- Post message to this script instance to recieve input from the game
	msg.post("#", "acquire_input_focus")
	
	-- States
	self.moving = false
	self.firing = false
	
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0) -- up by default
	self.speed = 50
	
	self.current_anim = ""
end

function final(self)
	msg.post("#", "release_input_focus")
end

local function animate(self)
	local a = ""
	if self.dir.x > 0 then
		a = "right"
	elseif self.dir.x < 0 then
		a = "left"
	elseif self.dir.y > 0 then
		a = "up"
	elseif self.dir.y < 0 then
		a = "down"
	elseif action_id == hash("fire") and action.pressed == true then
		self.firing = true
	end
	
	if a ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = hash("player-" .. a) })
		self.current_anim = a
	end
end

function update(self, dt)
	-- If moving, update position
	if self.moving then
		local pos = go.get_position()	
		pos = pos + self.input * self.speed * dt
		go.set_position(pos)
	end
	
	animate(self)

	if self.firing then
		-- fire a bullet
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		factory.create("#rocketfactory", go.get_position(), rot, { dir = self.dir })
	end
	
	-- Reset state values
	self.input.x = 0
	self.input.y = 0

	self.moving = false
	self.firing = false
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- handle input 8 ways
	if action_id == hash("up") then
		self.input.y = 1
		self.moving = true
	elseif action_id == hash("down") then
		self.input.y = -1
		self.moving = true
	elseif action_id == hash("left") then
		self.input.x = -1
		self.moving = true
	elseif action_id == hash("right") then
		self.input.x = 1
		self.moving = true
	elseif action_id == hash("fire") and action.pressed == true then
		self.firing = true
	end
	
	-- change direction if we have input
	if vmath.length(self.input) > 0 then
		-- diagonal needs normalizing
		self.dir = vmath.normalize(self.input)
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
